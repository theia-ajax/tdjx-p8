pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
	poke(0x5f2e,1)
	poke(0x5f2d,1)
	
	pfx_sys_init()

	play_init()
end

function load_entity(mx,my,m)
	if m==36 then
		spawn_player(mx+1,my+1.875)
		mset(mx,my,0)
		mset(mx+1,my,0)
		mset(mx,my+1,0)
		mset(mx+1,my+1,0)

	end
end

function load_level(lx,ly)
	reload(0x2000,1000)

	g.level={
		x=lx or 0,
		y=ly or 0,
	}
	
	for lvx=0,15 do
		for lvy=0,12 do
			local mx,my=g.level.x+lvx,
				g.level.y+lvy
			local m=mget(mx,my)
			if fget(m,1) then
				load_entity(mx,my,m)
			end
		end
	end
	
	assert(g.p~=nil)
end

function spawn_player(x,y)
	g.p=actor:new_char({
		x=x or 0,y=y or 0,
		dx=0,dy=0,
		w=1,h=2,
		face=1,
	})
end

function play_init()
	g={}
	
	g.cam={x=0,y=0,fx=0,fy=0}
	
	load_level(0,0)
	
	palette={
		[0]=0,[1]=1,[2]=2,[3]=3,
		[4]=4,[5]=5,[6]=6,[7]=7,
		[8]=8,[9]=9,[10]=10,[11]=11,
		[12]=12,[13]=13,[14]=14,[15]=15,
 }
 
 for i,p in pairs(palette) do
 	palette[i]=p+0x80
 end
 
	pal(palette,1)

	game_update=play_update
	game_draw=play_draw
end

function keypress(key)
	if key=="l" then
		load_level(0,0)
	end
end

function _update60()
	while stat(30) do
		keypress(stat(31))
	end
	
	game_update()
end

function _draw()
	game_draw()
end

function play_update()
	local ix,iy=0,0
	if (btn(0,0)) ix-=1
	if (btn(1,0)) ix+=1
	if (btn(2,0)) iy-=1
	if (btn(3,0)) iy+=1
	local try_jump=btnp(4,0)
	
	g.p:update_char(ix,iy,try_jump)
	
	local cam_focus=
	-- fx:focus x
	-- fy:focus y
	-- vw:view width
	-- vh:view height
	function(self,fx,fy,vw,vh)
		fx=fx and round(fx)-63 or self.x
		fy=fy and round(fy)-63 or self.y
		vw=vw or 0
		vh=vh or 0

		if self.x<fx-vw then
			self.x=fx-vw
		elseif self.x>fx+vw then
			self.x=fx+vw
		end
--		self.x=round(fx)-63
		self.y=round(fy)-63
		
		debug("camera:")
		debug(" pos:"..self.x..","..self.y)
		debug(" focus:"..fx..","..fy)
		debug(" view:"..vw..","..vh)
	end
	
	local cam_bound=
	function(self,l,r,t,b)
		self.x=mid(l,self.x,r)
		self.y=mid(t,self.y,b)
	end
	
	local cam_update=
		function(self,fx,fy)
			fx=fx or self.x
			fy=fy or self.y
			cam_focus(self,fx,fy,8)
			cam_bound(self,0,64*6,0,0)
		end
	local psx,psy=w2s(g.p.x,g.p.y)
	cam_update(g.cam,psx,psy)
	debug(g.cam.x..","..g.cam.y)
	
	--[[
		todo: clean this up maybe
		good god girl
	]]
	local asdf=abs(g.p.dx)
	
	pfx:circ({
		x=g.p.x*8-offx_flip(1,g.p.face),
		y=g.p.y*8-10+rnd(asdf)-(asdf/2),
		dx=-0.3*g.p.face,
		rad=1,
		dead⧗=4,
		color={14,12,1},
	})
	
	pfx_sys_update()
end

function offx_flip(offx,face)
	return face>0 and offx or -offx+1
end

function play_draw()
	cls(2)
	
	-- world space
	camera(g.cam.x,g.cam.y)
	
	local ox=0
	if (g.p.face<0) ox=0
	
	local sx,sy=w2s(g.p.x,g.p.y)
	
	spr(36,sx-8+ox,sy-15,2,2,g.p.face < 0)
	
	local x1,y1,x2,y2=g.p:bounds()
	local sx1,sy1,sx2,sy2=w2s(x1,y1,x2,y2)

	rect(sx1,sy1,sx2,sy2,10)
	
	map(0,0,0,0,64,32)
	
	pfx_sys_draw(0xffff)
	
	camera()
--	rectfill(0,104,127,127,0)
	
	draw_log()
	draw_debug_frame()
end
-->8
actor={
	x=0,y=0,
	dx=0,dy=0,
	w=0.25,h=1,
	face=1,
	⧗=0,
}
actor.__index=actor

function actor:new(params)
	return setmetatable(
		params or {},actor)
end

function actor:new_char(params)
	params=params or {}
	params.⧗={
		try_jump=0,
		grounded=0,
	}
	return setmetatable(params,actor)
end

function actor:move(mx,my)
	-- restrict motion to the right
	-- if moving right would collide
	local continue=true
	while mx>0 and continue do
--		(solid(
--				self.x+mx+self.w,
--				self.y) or
--			solid(
--				self.x+mx+self.w,
--				self.y-self.h+0.125))
--	do
		local test_x=self.x+mx+self.w

		local lower=solid(
			test_x,
			self.y)
		local upper=solid(
			test_x,
			self.y-self.h+0.125)
		
		continue=lower or upper
			
		if (continue)	mx=moveto(mx,0,0.125)
	end

	-- to the left
	while mx<0 and
		(solid(
				self.x+mx-self.w,
				self.y) or
			solid(
				self.x+mx-self.w,
				self.y-self.h+0.125))
	do
		mx=moveto(mx,0,0.125)
	end
	
	-- downward
	while my>0 and
		(solid(
				self.x-self.w,
				self.y+my) or
			solid(
				self.x+self.w,
				self.y+my))
	do
		my=moveto(my,0,0.125)
	end
	
	-- upward
	while my<0 and
		(solid(
				self.x-self.w,
				self.y-self.h+my) or
			solid(
				self.x+self.w,
				self.y-self.h+my))
	do
		my=moveto(my,0,0.125)
	end
	
	-- update position
	self.x+=mx
	self.y+=my
	
	return mx,my
end

function actor:update_char(ix,iy,ijump)
	if ix<0 then	
		self.face=-1
	elseif ix>0 then
		self.face=1
	end
	
	local accel=4/60
	local decay=2/60
	local maxspeed=12/60
	local gravity=1.25/60
	local jumpforce=15/60
	
	if ix~=0 then
		self.dx+=ix*accel
	else
		self.dx=moveto(self.dx,0,decay)
	end
	
	self.dx=mid(
		self.dx,-maxspeed,maxspeed)
	
	self.dy+=gravity
	
	if ijump then
		self.dy=-jumpforce
	end

	self.dx,self.dy=
		self:move(self.dx,self.dy)
		
	local on_ground=solid(
		self.x,self.y+0.125)
	
	if on_ground then
		self.ground⧗=4
	else
		self.ground⧗=moveto(
			self.ground⧗,0,1)
	end
end

function actor:on_ground()
	return self.ground⧗>0
end

function actor:bounds()
	return self.x-self.w,
		self.y-self.h+0.125,
		self.x+self.w,
		self.y
end

function solid(x,y)
	return fget(mget(x,y),0)
end

function w2s(x1,y1,x2,y2)
	x1=x1 or 0
	y1=y1 or 0
	x2=x2 or 0
	y2=y2 or 0
	return x1*8,y1*8,x2*8,y2*8
end

-->8
function moveto(val,to,rate)
	val=val or to
	if val<to then
		return min(val+rate,to)
	elseif val>to then
		return max(val-rate,to)
	end
	return val
end

function halt(err)
	cls()
	flip()
	color(7)
	?err
	stop()
end

function blink(ivl,tt)
	tt=tt or t()
	return flr((tt*2)/ivl)%2==0
end

-- shallow copy
-- errors on table value
function tblcopy(tab)
	local ret={}
	for k,v in pairs(tab) do
		assert(type(v)~="table")
		ret[k]=v
	end
	return ret
end
-->8
function pfx_sys_init()
	pfx_sys={}
	pfx_sys.pfx={}
end

function pfx_sys_update()
	for p in all(pfx_sys.pfx) do
		p:update()
		if p.dead then
			del(pfx_sys.pfx,p)
		end
	end
end

function pfx_sys_draw(layermask)
	layermask=layermask or 0xffff
	for p in all(pfx_sys.pfx) do
		if layermask&(1<<p.layer)~=0
		then
			if p.ptype==pfx_type_circ
			then
				local col
				if type(p.color)=="number"
				then
					col=p.color
				elseif type(p.color)=="table"
				then
					local idx=
						p:life_norm()*#p.color+1
					log(idx)
					col=p.color[idx]
				end
				circfill(p.x,p.y,p.rad,col)
			end
		end
	end
end

pfx_type_circ=0
pfx_type_spr=1

pfx={
	x=0,y=0,dx=0,dy=0,
	ptype=0,
	life⧗=0,
	layer=0,
}
pfx.__index=pfx

function pfx:new(p)
	return add(
		pfx_sys.pfx,
			setmetatable(p or {},self))
end

function pfx:circ(p)
	p=p or {}
	p.rad=p.rad or 1
	p.color=p.color or 7
	return pfx:new(p)
end

function pfx:life_norm()
	if pfx.dead⧗~= nil and pfx.dead⧗>0 then
		return pfx.life⧗/pfx.dead⧗
	end
	return 0
end

function pfx:update()
	self.x+=self.dx
	self.y+=self.dy
	
	local rad=self.rad or 1
	local drad=self.drad or 0
	local radmin=self.radmin or -32768
	local radmax=self.radmax or 32767
	self.rad=mid(radmin,rad+drad,radmax)
	self.life⧗+=1
	if self.life⧗>=self.dead⧗ then
		self.dead=true
	end
end

-->8
-- utilities

function round(v)
	local frac=v-flr(v)
	if frac<0.5 or
		frac==0.5 and v<0
	then
		return flr(v)
	else
		return ceil(v)
	end
end

_log={
	view_idx=0,
	logs={},
}

function log(m,c)
	add(_log.logs,
		{m=m or "",c=c or 7})
		
	if #_log.logs-_log.view_idx>19
	then
		_log.view_idx=#_log.logs-19
	end
end

function draw_log()
	local n=#_log.logs
	for i=_log.view_idx,n-1 do
		local l=_log.logs[i]
		print(0,i*6,l,c)
	end
end

_debug={}

function debug(m)
	add(_debug,tostr(m))
end

function draw_debug_frame()
	for i,m in ipairs(_debug) do
		print(m,0,(i-1)*6,7)
	end
	_debug={}
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000006666666600000000000000000000000099999999999999999e358361922613d9
00000000000000000000000000000000000000000000000000000000000000006655556600000000000000000000000094444114444444499e35437192261ed9
0070070000000000000000000000000000000000000000000000000000000000655556560000000000000000000000009444488447c442499e35416192261ed9
00077000000000000000000000000000000000000000000000000000000000006555655600000000000000000000000094cd411946c592499e35417492241ed9
000770000000000000000000000000000000000000000000000000000000000065565556000000000000000000000000985d4119471542399435836492241349
007007000000000000000000000000000000000000000000000000000000000065655556000000000000000000000000925d6119d61592999434437442244449
000000000000000000000000000000000000000000000000000000000000000066555566000000000000000000000000925d6889d7c542999444444444444449
00000000000000000000000000000000000000000000000000000000000000006666666600000000000000000000000098cd6119d6c592999999999999999999
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099999999999999999d1163d55e285de9
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094444444444444499d1163d66e885de9
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094344c74444444499d1163d55e285de9
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000943d1c649244dc499d1143d66e2854e9
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095862d7492d4d129941144d55e884449
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000918d2d6d92d6d1399411444444284449
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091362c7d92d6d1399444444444444449
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000953d1c6d92d6dc299999999999999999
0aaaaaa00000000000aaaaa00000000000000000d0000000000000000000000000000000000000000000000000000000999999999999999992cd6d29d6c1d359
aaaafaf0000000000aaaaaaa0000000000000000dd0000000000000000000000000000000000000000000000000000009444444444444449931d6d29d7c26319
a0afcfc000000000aaaafaaa000000000000000ddddd00000000000000000000000000000000000000000000000000009444824444441149931d6d29d6d2db19
00fffff0eeee00000a9fcffc09900000000000dddeee0000000000000000000000000000000000000000000000000000944488e55d441149921d4d2947d26b59
eee222eeee220000099ffff9999999000000000eeeffe0000000000000000000000000000000000000000000000000009e4582e66d3411d994cd442946c1d349
eeeeeeeeeee200000999999999999900000000eeefcfe0000000000000000000000000000000000000000000000000009ed582e55d3611d99444444447c44349
00222200000000000999999999999900000000eedfff00000000000000000000000000000000000000000000000000009ed588e66d3611d99444444444444449
00ee0ee00000000000ddddd000000000000000dddddd00000000000000000000000000000000000000000000000000009ed582e55d3611d99999999999999999
000000000000000000000000000000000000ddddd0ddf000000000000000000000000000000000000000000000000000999999999999999993295c6d9116dc89
00000000000000000000000000000000444dddddd00f0f00000000000000000000000000000000000000000000000000944444444444444999245c7d9886d529
00000000000000000000000000000000444ddddddd44444400000000000000000000000000000000000000000000000094444224473443499929516d9116d529
0000000000000000000000000000000000000ddfff0000000000000000000000000000000000000000000000000000009431422946385349932451749114d589
00000000000000000000000000000000000000fff00000000000000000000000000000000000000000000000000000009de14229471453e994295c649114dc49
0000000000000000000000000000000000000fd0000000000000000000000000000000000000000000000000000000009de16229161453e994244c7448844449
0000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000009de16229173453e99444444441144449
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009d316229163853e99999999999999999
__gff__
0000000000000000010000000101010100000000000000000000000001010101020000000200000000000000010101010000000000000000000000000101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000e0f00000000000000000e0f0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000001e1f00000000000000001e1f0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000002e2f00000000000000002e2f0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000003e3f00000000000000003e3f0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0824250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
083435000000000c0d000000000000000000000000000c0d0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080808000000001c1d000000000000000000000000001c1d0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080808000000002c2d000000000000000000000000002c2d0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080808000000003c3d000000000000000000000000003c3d0000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000808080808080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
